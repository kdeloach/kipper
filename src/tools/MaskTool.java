package kipper.tools;

import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JButton;
import java.awt.Image;
import java.awt.Color;
import java.awt.Polygon;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.ArrayList;
import kipper.Util;
import kipper.ships.*;

public class MaskTool
{
    public static void main(String[] argv)
    {
        JFrame frame;
        JButton btn;
        final JTextArea txt = new JTextArea("");
        final DrawPanel drawpanel = new DrawPanel(txt);

		frame = new JFrame("mask tool");
		GridBagLayout layout = new GridBagLayout();
		frame.setLayout(layout);

		GridBagConstraints gc = new GridBagConstraints();
		gc.gridwidth = 1;
		gc.gridheight = 1;
		gc.weightx = 0;
		gc.weighty = 0;

		gc.gridx = 0;
		gc.gridy = 1;
		txt.setRows(10);
		txt.setColumns(50);
		txt.setLineWrap(true);
		layout.setConstraints(txt, gc);
		frame.add(txt);

		gc.gridx = 1;
		gc.gridy = 1;
		btn = new JButton("clear");
		btn.addActionListener(
			new ActionListener()
            {
				public void actionPerformed(ActionEvent evt)
                {
					txt.setText("");
					drawpanel.mask = new Polygon();
					drawpanel.repaint();
				}
			}
		);
		layout.setConstraints(btn, gc);
		frame.add(btn);

		gc.gridx = 0;
		gc.gridy = 0;
		gc.gridwidth = 2;
		gc.weightx = 1;
		gc.weighty = 1;
		layout.setConstraints(drawpanel, gc);
		frame.add(drawpanel);

		frame.pack();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}

class DrawPanel extends JPanel implements MouseListener
{
	Image img;
	Polygon mask;
	JTextArea txt;
	int factor = 10;
    int imgWidth, imgHeight;

	public DrawPanel(JTextArea t)
    {
		this.txt = t;
		addMouseListener(this);
		mask = new Polygon();
		img = Util.instance.loadImage("/assets/enterprise2.png");
	}

    public int getWidth() { return 800; }
    public int getHeight() { return 600; }
	public Dimension getMinimumSize() { return new Dimension(getWidth(), getHeight()); }
	public Dimension getPreferredSize() { return getMinimumSize(); }

	public void paint(Graphics g)
    {
		super.paint(g);

        imgWidth = img.getWidth(this) * factor;
        imgHeight = img.getHeight(this) * factor;

		g.setColor(Color.GRAY);
		g.fillRect(0, 0, getWidth(), getHeight());

        int imgX = getWidth() / 2 - imgWidth / 2;
        int imgY = getHeight() / 2 - imgHeight / 2;

        g.setColor(Color.GREEN);
        g.drawRect(imgX, imgY, imgWidth, imgHeight);
		g.drawImage(img, imgX, imgY, imgWidth, imgHeight, this);

		g.setColor(Color.GRAY);
		g.drawPolygon(mask);
		g.setColor(Color.BLACK);
		for (int i = 0; i < mask.npoints; i++) {
			g.drawOval(mask.xpoints[i] - 10, mask.ypoints[i] - 10, 20, 20);
        }
	}

	public void mousePressed(MouseEvent evt)
    {
		mask.addPoint(evt.getX(), evt.getY());
	}

	public void mouseReleased(MouseEvent e)
    {
		txt.setText(getMaskCode());
		repaint();
	}

    String getMaskCode()
    {
		List<Object> sb = new ArrayList<Object>();
		sb.add("// Generated by mask tool\n");
		sb.add("public Polygon getDefaultMask()\n{\n    return new Polygon(new int[] {");

        List<Object> xz = new ArrayList<Object>();
		for (int i = 0; i < mask.npoints; i++) {
            int x = (mask.xpoints[i] - getWidth() / 2 + imgWidth / 2) / factor;
			xz.add(x);
		}
		sb.add(Util.join(xz, ", "));
        sb.add("}, new int[] {");

        xz = new ArrayList<Object>();
		for (int i = 0; i < mask.npoints; i++) {
            int y = (mask.ypoints[i] - getHeight() / 2 + imgHeight / 2) / factor;
			xz.add(y);
		}
        sb.add(Util.join(xz, ", "));
        sb.add("}, ");
        sb.add(mask.npoints);
        sb.add(");\n}");
        return Util.join(sb, "");
    }

	public void mouseExited(MouseEvent e) {}
	public void mouseEntered(MouseEvent e) {}
	public void mouseClicked(MouseEvent e) {}
}
