package kipper.ships;

import java.awt.Image;
import java.awt.Color;
import java.awt.*;
import java.awt.image.*;
import java.awt.geom.*;
import java.awt.Toolkit;
import java.awt.Dimension;
import kipper.*;
import kipper.effects.*;
import kipper.weapons.*;
import kipper.upgrades.*;

public class Squid extends Ship
{
    Image img;

    public Squid(int x, int y, OuterSpacePanel c)
    {
        super(x, y, 2, c);
        img = Util.instance.loadImage("/assets/squid.png");
        Weapon w1 = new Shooter(getX(), getY(), 0, getHeight() / 2, this);
        w1.addUpgrade(new RotateUpgrade());
        equipWeapon(w1);
        selectWeapon(0);
    }

    @Override
    public void think()
    {
        doSomethingSmart();
    }

    private void doSomethingSmart()
    {
        Ship player = osp.getPlayer();
        if (player == null) {
            getWeapon().stopFiring();
        } else {
            // shoot weapon
            if (getWeapon() != null && !getWeapon().isFiring()) {
                getWeapon().startFiring();
            }
            // get ready to fire here
            int px = (int)(player.getX() + player.getWidth() / 2);
            int py = (int)(player.getY() + player.getHeight() / 2);
            targetLocation(px, py);
        }
    }

    @Override
    protected void deathExplosion()
    {
        double px = getX() + getWidth() / 2;
        double py = getY() + getHeight() / 2;
        ParticleEmitter pe = new ParticleEmitter(px, py, new KirbyExplosion());
        osp.addEmitter(pe);
    }

    // Generated by mask tool
    @Override
    public Polygon getPolygonMask()
    {
        return new Polygon(new int[] {49, 36, 12, 0, 4, 18, 25, 36}, new int[] {33, 37, 36, 25, 13, 8, 3, 0}, 8);
    }

    @Override public int getWidth() { return 49; }
    @Override public int getHeight() { return 38; }
    @Override public String getName() { return "SQUID";}
    @Override public int getOrientation() { return Const.FACE_LEFT; }
    @Override public int getSpeed() { return 20; }
    @Override public int getMaxLife() { return 100; }
    @Override public Image getImage() { return img; }
}
